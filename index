import re
import string

class UniversalEnglishToPersianTranslator:
    def __init__(self):
        self.translation_dict = {}
        self.initialize_comprehensive_dictionary()
    
    def initialize_comprehensive_dictionary(self):
        """Initialize with a much larger vocabulary"""
        base_dict = {
            # Pronouns
            'i': 'من', 'you': 'تو', 'he': 'او', 'she': 'او', 'we': 'ما', 'they': 'آنها', 'it': 'آن',
            'me': 'من', 'him': 'او', 'her': 'او', 'us': 'ما', 'them': 'آنها',
            'my': 'من', 'your': 'تو', 'his': 'او', 'her': 'او', 'our': 'ما', 'their': 'آنها',
            'mine': 'مال من', 'yours': 'مال تو', 'hers': 'مال او', 'ours': 'مال ما', 'theirs': 'مال آنها',
            
            # Common verbs - FIXED: Modal verbs as separate
            'am': 'هستم', 'is': 'است', 'are': 'هستید', 'was': 'بود', 'were': 'بودید',
            'have': 'دارم', 'has': 'دارد', 'had': 'داشت',
            'do': 'می‌کنم', 'does': 'می‌کند', 'did': 'کرد',
            'go': 'برویم', 'went': 'رفتیم', 'goes': 'می‌رود', 'going': 'رفتن',
            'see': 'می‌بینم', 'saw': 'دیدم', 'seen': 'دیده',
            'get': 'می‌گیرم', 'got': 'گرفتم',
            'make': 'می‌سازم', 'made': 'ساختم',
            'take': 'می‌گیرم', 'took': 'گرفتم',
            'come': 'می‌آیم', 'came': 'آمدم',
            'know': 'می‌دانم', 'knew': 'دانستم',
            'think': 'فکر می‌کنم', 'thought': 'فکر کردم',
            'want': 'می‌خواهم', 'wanted': 'خواستم',
            'like': 'دوست دارم', 'liked': 'دوست داشتم',
            'love': 'دوست دارم', 'loved': 'دوست داشتم',
            'work': 'کار می‌کنم', 'worked': 'کار کردم',
            'play': 'بازی می‌کنم', 'played': 'بازی کردم',
            'read': 'می‌خوانم', 'reading': 'خواندن',
            'write': 'می‌نویسم', 'writing': 'نوشتن',
            'speak': 'صحبت می‌کنم', 'speaking': 'صحبت کردن',
            'understand': 'می‌فهمم', 'understanding': 'فهمیدن',
            'learn': 'یاد می‌گیرم', 'learning': 'یادگیری',
            'teach': 'آموزش می‌دهم', 'teaching': 'آموزش دادن',
            'say': 'می‌گویم', 'said': 'گفت',
            'find': 'پیدا می‌کنم', 'found': 'پیدا کرد',
            'give': 'می‌دهم', 'gave': 'داد',
            'tell': 'می‌گویم', 'told': 'گفت',
            'call': 'تماس می‌گیرم', 'called': 'تماس گرفت',
            'try': 'سعی می‌کنم', 'tried': 'سعی کرد',
            'ask': 'می‌پرسم', 'asked': 'پرسید',
            'need': 'نیاز دارم', 'needed': 'نیاز داشت',
            'feel': 'احساس می‌کنم', 'felt': 'احساس کرد',
            'become': 'می‌شوم', 'became': 'شد',
            'leave': 'ترک می‌کنم', 'left': 'ترک کرد',
            'put': 'می‌گذارم', 'put': 'گذاشت',
            'mean': 'معنی می‌دهم', 'meant': 'معنی داد',
            'keep': 'نگه می‌دارم', 'kept': 'نگه داشت',
            'let': 'اجازه می‌دهم', 'let': 'اجازه داد',
            'begin': 'شروع می‌کنم', 'began': 'شروع کرد',
            'seem': 'به نظر می‌رسد', 'seemed': 'به نظر رسید',
            'help': 'کمک می‌کنم', 'helped': 'کمک کرد',
            'show': 'نشان می‌دهم', 'showed': 'نشان داد',
            'hear': 'می‌شنوم', 'heard': 'شنید',
            'run': 'می‌دوم', 'ran': 'دوید',
            'move': 'حرکت می‌کنم', 'moved': 'حرکت کرد',
            'live': 'زندگی می‌کنم', 'lived': 'زندگی کرد',
            'believe': 'باور می‌کنم', 'believed': 'باور کرد',
            'bring': 'می‌آورم', 'brought': 'آورد',
            'happen': 'اتفاق می‌افتد', 'happened': 'اتفاق افتاد',
            
            # Modal verbs - FIXED: As separate category
            'can': 'می‌توانیم', 'could': 'می‌توانستیم',
            'will': 'خواهیم', 'would': 'می‌کردیم',
            'shall': 'باید', 'should': 'باید',
            'may': 'ممکن است', 'might': 'ممکن بود',
            'must': 'باید',
            
            # Common nouns
            'time': 'زمان', 'person': 'شخص', 'people': 'مردم', 'man': 'مرد', 'woman': 'زن', 
            'child': 'کودک', 'children': 'کودکان', 'family': 'خانواده', 'friend': 'دوست',
            'house': 'خانه', 'home': 'خانه', 'room': 'اتاق', 'door': 'در', 'window': 'پنجره',
            'car': 'ماشین', 'bus': 'اتوبوس', 'train': 'قطار', 'bike': 'دوچرخه',
            'water': 'آب', 'food': 'غذا', 'bread': 'نان', 'rice': 'برنج', 'fruit': 'میوه',
            'book': 'کتاب', 'pen': 'خودکار', 'paper': 'کاغذ', 'computer': 'کامپیوتر',
            'phone': 'تلفن', 'tv': 'تلویزیون', 'music': 'موسیقی',
            'school': 'مدرسه', 'teacher': 'معلم', 'student': 'دانشجو', 'study': 'مطالعه',
            'work': 'کار', 'job': 'شغل', 'money': 'پول', 'price': 'قیمت',
            'city': 'شهر', 'country': 'کشور', 'world': 'جهان', 'street': 'خیابان',
            'day': 'روز', 'night': 'شب', 'week': 'هفته', 'month': 'ماه', 'year': 'سال',
            'sun': 'خورشید', 'moon': 'ماه', 'star': 'ستاره', 'sky': 'آسمان',
            'tree': 'درخت', 'flower': 'گل', 'animal': 'حیوان', 'dog': 'سگ', 'cat': 'گربه',
            'bird': 'پرنده', 'fish': 'ماهی', 'horse': 'اسب', 'cow': 'گاو', 'chicken': 'مرغ',
            'name': 'اسم', 'word': 'کلمه', 'number': 'عدد', 'part': 'قسمت',
            'problem': 'مشکل', 'fact': 'واقعیت', 'way': 'راه', 'thing': 'چیز',
            'life': 'زندگی', 'hand': 'دست', 'eye': 'چشم', 'head': 'سر',
            'place': 'مکان', 'point': 'نقطه', 'government': 'دولت', 'company': 'شرکت',
            'group': 'گروه', 'case': 'مورد', 'table': 'میز', 'chair': 'صندلی',
            'bed': 'تخت', 'kitchen': 'آشپزخانه', 'bathroom': 'دستشویی',
            'garden': 'باغ', 'park': 'پارک', 'shop': 'فروشگاه', 'market': 'بازار',
            'hospital': 'بیمارستان', 'doctor': 'دکتر', 'medicine': 'دارو',
            'air': 'هوا', 'fire': 'آتش', 'earth': 'زمین', 'rain': 'باران',
            'snow': 'برف', 'wind': 'باد', 'sea': 'دریا', 'river': 'رودخانه',
            'mountain': 'کوه', 'forest': 'جنگل', 'road': 'جاده', 'bridge': 'پل',
            'dinner': 'شام', 'lunch': 'ناهار', 'breakfast': 'صبحانه',
            
            # Adjectives
            'good': 'خوب', 'bad': 'بد', 'big': 'بزرگ', 'small': 'کوچک', 
            'beautiful': 'زیبا', 'ugly': 'زشت', 'happy': 'خوشحال', 'sad': 'غمگین',
            'angry': 'عصبانی', 'tired': 'خسته', 'hungry': 'گرسنه', 'thirsty': 'تشنه',
            'hot': 'داغ', 'cold': 'سرد', 'warm': 'گرم', 'cool': 'خنک',
            'new': 'جدید', 'old': 'قدیمی', 'young': 'جوان', 'fast': 'سریع',
            'slow': 'آهسته', 'easy': 'آسان', 'difficult': 'سخت', 'important': 'مهم',
            'first': 'اول', 'last': 'آخرین', 'long': 'طولانی', 'great': 'عالی',
            'little': 'کوچک', 'own': 'خود', 'other': 'دیگر', 'right': 'درست',
            'high': 'بلند', 'different': 'متفاوت', 'large': 'بزرگ', 'next': 'بعدی',
            'early': 'زود', 'public': 'عمومی', 'same': 'همان', 'able': 'قادر',
            'strong': 'قوی', 'weak': 'ضعیف', 'rich': 'ثروتمند', 'poor': 'فقیر',
            'clean': 'تمیز', 'dirty': 'کثیف', 'dark': 'تاریک', 'light': 'روشن',
            'heavy': 'سنگین', 'soft': 'نرم', 'hard': 'سخت', 'sweet': 'شیرین',
            'bitter': 'تلخ', 'salty': 'شور', 'sour': 'ترش',
            
            # Adverbs
            'very': 'بسیار', 'too': 'خیلی', 'so': 'بنابراین', 'also': 'نیز',
            'only': 'فقط', 'well': 'خوب', 'now': 'اکنون', 'then': 'سپس',
            'here': 'اینجا', 'there': 'آنجا', 'today': 'امروز', 'tomorrow': 'فردا',
            'yesterday': 'دیروز', 'always': 'همیشه', 'never': 'هرگز', 'often': 'اغلب',
            'sometimes': 'گاهی اوقات', 'usually': 'معمولا', 'quickly': 'به سرعت',
            'slowly': 'به آهستگی', 'easily': 'به آسانی', 'hard': 'سخت',
            'together': 'با هم', 'alone': 'تنها', 'again': 'دوباره',
            
            # Prepositions
            'in': 'در', 'on': 'روی', 'at': 'در', 'to': 'به', 'from': 'از',
            'with': 'با', 'without': 'بدون', 'for': 'برای', 'about': 'درباره',
            'by': 'توسط', 'as': 'به عنوان', 'of': 'از', 'up': 'بالا',
            'into': 'به داخل', 'through': 'از طریق', 'during': 'در طول', 
            'before': 'قبل', 'after': 'بعد', 'above': 'بالا', 'below': 'پایین', 
            'between': 'بین', 'under': 'زیر', 'over': 'روی', 'around': 'اطراف',
            'behind': 'پشت', 'front': 'جلو', 'inside': 'داخل', 'outside': 'خارج',
            
            # Conjunctions
            'and': 'و', 'but': 'اما', 'or': 'یا', 'because': 'زیرا', 
            'if': 'اگر', 'when': 'وقتی', 'while': 'در حالی که', 'though': 'اگرچه',
            'where': 'جایی که', 'since': 'از آنجا که', 'until': 'تا',
            
            # Question words
            'what': 'چه', 'who': 'چه کسی', 'where': 'کجا', 'when': 'کی',
            'why': 'چرا', 'how': 'چگونه', 'which': 'کدام', 'whose': 'مال چه کسی',
            
            # Common phrases
            'hello': 'سلام', 'hi': 'سلام', 'goodbye': 'خداحافظ', 'bye': 'خداحافظ',
            'please': 'لطفا', 'thank you': 'متشکرم', 'thanks': 'ممنون', 
            'sorry': 'متاسفم', 'excuse me': 'ببخشید',
            'yes': 'بله', 'no': 'نه', 'ok': 'باشه', 'okay': 'باشه',
        }
        
        self.translation_dict = base_dict
    
    def preprocess_text(self, text):
        """Clean and tokenize text"""
        text = text.lower()
        # Remove punctuation but keep basic sentence structure
        text = re.sub(r'[^\w\s]', ' ', text)
        # Split into words
        words = text.split()
        return words
    
    def handle_contractions(self, word):
        """Expand common English contractions"""
        contractions = {
            "i'm": "i am", "you're": "you are", "he's": "he is", "she's": "she is",
            "it's": "it is", "we're": "we are", "they're": "they are",
            "i've": "i have", "you've": "you have", "we've": "we have", "they've": "they have",
            "i'll": "i will", "you'll": "you will", "he'll": "he will", "she'll": "she will",
            "we'll": "we will", "they'll": "they will", "don't": "do not",
            "doesn't": "does not", "didn't": "did not", "can't": "cannot",
            "couldn't": "could not", "won't": "will not", "wouldn't": "would not",
            "shouldn't": "should not", "isn't": "is not", "aren't": "are not",
            "wasn't": "was not", "weren't": "were not", "haven't": "have not",
            "hasn't": "has not", "hadn't": "had not", "what's": "what is"
        }
        return contractions.get(word.lower(), word)
    
    def translate_word(self, word):
        """Translate a single word using direct dictionary lookup"""
        # Handle contractions first
        expanded = self.handle_contractions(word)
        if expanded != word:
            return expanded
        
        # Clean the word
        clean_word = word.strip(string.punctuation).lower()
        
        # Check direct translation
        if clean_word in self.translation_dict:
            return self.translation_dict[clean_word]
        
        # For unknown words, try simple plural forms
        if clean_word.endswith('s') and len(clean_word) > 1:
            singular = clean_word[:-1]
            if singular in self.translation_dict:
                return self.translation_dict[singular]
        
        # Return the original word if not found
        return clean_word
    
    def apply_persian_syntax(self, english_words, persian_words):
        """Apply proper Persian syntax rules - FIXED VERSION"""
        if not persian_words:
            return []
        
        # Remove articles and filter empty words
        filtered_persian = []
        filtered_english = []
        
        for eng, per in zip(english_words, persian_words):
            if eng not in ['the', 'a', 'an'] and per:
                filtered_persian.append(per)
                filtered_english.append(eng)
        
        if not filtered_persian:
            return []
        
        # NEW: Handle modal verbs properly
        modal_verbs = ['can', 'could', 'will', 'would', 'shall', 'should', 'may', 'might', 'must']
        main_verbs = ['go', 'come', 'see', 'know', 'want', 'like', 'love', 'work', 'play', 'read', 'write']
        
        has_modal = any(eng in modal_verbs for eng in filtered_english)
        has_main_verb = any(eng in main_verbs for eng in filtered_english)
        
        # If we have both modal and main verb, use only modal in Persian
        if has_modal and has_main_verb:
            result = []
            
            # Add subject
            for i, eng_word in enumerate(filtered_english):
                if eng_word in ['i', 'you', 'he', 'she', 'we', 'they']:
                    result.append(filtered_persian[i])
            
            # Add modal verb (skip main verb)
            for i, eng_word in enumerate(filtered_english):
                if eng_word in modal_verbs:
                    result.append(filtered_persian[i])
            
            # Add other words (objects, prepositions, etc.)
            for i, eng_word in enumerate(filtered_english):
                if (eng_word not in modal_verbs and 
                    eng_word not in main_verbs and 
                    eng_word not in ['i', 'you', 'he', 'she', 'we', 'they'] and
                    filtered_persian[i] not in result):
                    result.append(filtered_persian[i])
            
            return result
        
        # For regular sentences without modal verbs
        result = []
        
        # Add subjects first
        for i, eng_word in enumerate(filtered_english):
            if eng_word in ['i', 'you', 'he', 'she', 'we', 'they']:
                result.append(filtered_persian[i])
        
        # Add objects and other words
        for i, eng_word in enumerate(filtered_english):
            if (eng_word not in ['i', 'you', 'he', 'she', 'we', 'they'] and
                filtered_persian[i] not in result):
                result.append(filtered_persian[i])
        
        return result
    
    def translate_sentence(self, english_sentence):
        """Translate a complete sentence"""
        if not english_sentence.strip():
            return ""
        
        # Preprocess
        words = self.preprocess_text(english_sentence)
        
        # Translate each word
        translated_words = []
        for word in words:
            translation = self.translate_word(word)
            if ' ' in translation:
                translated_words.extend(translation.split())
            else:
                translated_words.append(translation)
        
        # Apply Persian syntax
        final_translation = self.apply_persian_syntax(words, translated_words)
        
        # Join and clean
        persian_sentence = ' '.join(final_translation)
        persian_sentence = re.sub(r'\s+', ' ', persian_sentence).strip()
        
        return persian_sentence

def main():
    translator = UniversalEnglishToPersianTranslator()
    
    print("=" * 70)
    print("🌍 ENGLISH TO PERSIAN TRANSLATOR - FIXED MODAL VERBS")
    print("=" * 70)
    print("Now properly handles modal verbs like 'can', 'will', etc.")
    print("=" * 70)
    
    # Test with modal verbs
    test_cases = [
        "can we go for dinner",
        "i will come tomorrow",
        "you should study hard",
        "we can play football",
        "she must go to school",
        "they may come later",
        "can you help me",
        "we should eat food",
        "i can speak english",
        "you must see this"
    ]
    
    print("\n🧪 MODAL VERBS TEST:")
    print("-" * 50)
    
    for i, test in enumerate(test_cases, 1):
        translation = translator.translate_sentence(test)
        print(f"{i:2d}. EN: {test}")
        print(f"    FA: {translation}")
        print()
    
    # Interactive session
    print("\n💬 INTERACTIVE TRANSLATION:")
    print("-" * 50)
    
    while True:
        try:
            user_input = input("\n📝 Enter English text (or 'quit'): ").strip()
            
            if user_input.lower() in ['quit', 'exit', 'q']:
                print("👋 Goodbye! خداحافظ!")
                break
                
            if user_input:
                translation = translator.translate_sentence(user_input)
                print(f"\n✅ English: {user_input}")
                print(f"✅ Persian: {translation}")
                
                # Show word breakdown
                words = translator.preprocess_text(user_input)
                print("\n🔍 Word breakdown:")
                for word in words:
                    trans = translator.translate_word(word)
                    if trans != word:
                        print(f"   '{word}' → '{trans}'")
            else:
                print("⚠️  Please enter some text!")
                
        except KeyboardInterrupt:
            print("\n\n👋 Goodbye! خداحافظ!")
            break
        except Exception as e:
            print(f"❌ Error: {e}")

if __name__ == "__main__":
    main()
