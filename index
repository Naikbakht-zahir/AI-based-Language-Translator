import re
import string
import numpy as np
from collections import defaultdict
import math

class AIPersianTranslator:
    def __init__(self):
        self.translation_dict = {}
        # AI Components
        self.sentence_patterns = {}
        self.word_embeddings = {}
        self.language_model = defaultdict(lambda: defaultdict(int))
        
        self.initialize_comprehensive_dictionary()
        self.initialize_ai_components()
    
    def initialize_ai_components(self):
        """Initialize AI components for better translation"""
        # Sentence patterns for common structures
        self.sentence_patterns = {
            'question': {
                'what': 'چه {noun} {verb}',
                'where': 'کجا {verb} {noun}',
                'when': 'کی {verb} {noun}',
                'why': 'چرا {verb} {noun}',
                'how': 'چگونه {verb} {noun}',
                'can': 'آیا {subject} می‌تواند {verb}',
                'will': 'آیا {subject} خواهد {verb}'
            },
            'statement': {
                'subject_verb_object': '{subject} {object} {verb}',
                'subject_be_adjective': '{subject} {adjective} است',
                'possessive': '{possessed} {possessor} {verb}'
            }
        }
        
        # Simple word embeddings for semantic similarity
        self.word_embeddings = {
            'go': ['move', 'travel', 'walk', 'run', 'come'],
            'big': ['large', 'huge', 'great', 'massive', 'enormous'],
            'small': ['little', 'tiny', 'mini', 'compact', 'petite'],
            'happy': ['joyful', 'glad', 'pleased', 'delighted', 'cheerful'],
            'sad': ['unhappy', 'depressed', 'miserable', 'sorrowful', 'gloomy'],
            'good': ['nice', 'excellent', 'fine', 'wonderful', 'great'],
            'bad': ['poor', 'terrible', 'awful', 'horrible', 'negative']
        }
    
    def ai_sentence_analyzer(self, english_sentence):
        """AI-powered sentence analysis to understand structure"""
        words = self.preprocess_text(english_sentence)
        
        analysis = {
            'sentence_type': 'statement',  # question, command, statement
            'main_verb': None,
            'subject': None,
            'object': None,
            'tense': 'present',
            'modality': None  # can, will, should, etc.
        }
        
        # Detect sentence type
        if any(word in ['what', 'where', 'when', 'why', 'how', 'can', 'will'] for word in words):
            analysis['sentence_type'] = 'question'
        
        # Detect modality
        modal_verbs = ['can', 'could', 'will', 'would', 'shall', 'should', 'may', 'might', 'must']
        for word in words:
            if word in modal_verbs:
                analysis['modality'] = word
        
        # Detect tense (simplified)
        if any(word in ['was', 'were', 'had', 'did'] for word in words):
            analysis['tense'] = 'past'
        elif any(word.endswith('ing') for word in words):
            analysis['tense'] = 'present_continuous'
        
        # Find subject (simplified)
        pronouns = ['i', 'you', 'he', 'she', 'we', 'they', 'it']
        for word in words:
            if word in pronouns:
                analysis['subject'] = word
                break
        
        return analysis
    
    def ai_semantic_similarity(self, word1, word2):
        """Calculate semantic similarity between words using simple embeddings"""
        if word1 == word2:
            return 1.0
        
        # Check if words are in each other's semantic clusters
        if word1 in self.word_embeddings and word2 in self.word_embeddings[word1]:
            return 0.8
        if word2 in self.word_embeddings and word1 in self.word_embeddings[word2]:
            return 0.8
        
        # Simple character-based similarity
        common_chars = len(set(word1) & set(word2))
        max_len = max(len(word1), len(word2))
        
        return common_chars / max_len if max_len > 0 else 0
    
    def ai_find_best_translation(self, english_word, context_words=[]):
        """AI-powered word translation with context awareness"""
        # Direct dictionary lookup first
        if english_word in self.translation_dict:
            return self.translation_dict[english_word]
        
        # Try semantic similarity for unknown words
        best_similarity = 0
        best_translation = english_word
        
        for known_word, translation in self.translation_dict.items():
            similarity = self.ai_semantic_similarity(english_word, known_word)
            if similarity > best_similarity and similarity > 0.6:
                best_similarity = similarity
                best_translation = translation
        
        return best_translation
    
    def ai_enhanced_syntax(self, english_words, persian_words, sentence_analysis):
        """AI-powered syntax rearrangement"""
        if not persian_words:
            return []
        
        # Remove articles
        filtered_persian = []
        filtered_english = []
        
        for eng, per in zip(english_words, persian_words):
            if eng not in ['the', 'a', 'an'] and per:
                filtered_persian.append(per)
                filtered_english.append(eng)
        
        # Apply AI-based syntax rules based on sentence analysis
        if sentence_analysis['sentence_type'] == 'question':
            return self.ai_handle_question(filtered_english, filtered_persian, sentence_analysis)
        else:
            return self.ai_handle_statement(filtered_english, filtered_persian, sentence_analysis)
    
    def ai_handle_question(self, english_words, persian_words, analysis):
        """AI handling for question sentences"""
        result = []
        
        # For "can" questions
        if analysis['modality'] == 'can':
            # Pattern: آیا + subject + می‌تواند + verb + object
            result.append('آیا')
            
            # Add subject
            for i, eng_word in enumerate(english_words):
                if eng_word in ['i', 'you', 'he', 'she', 'we', 'they']:
                    result.append(persian_words[i])
            
            # Add modal verb
            result.append('می‌تواند')
            
            # Add other words (skip modal and subject)
            for i, eng_word in enumerate(english_words):
                if (eng_word not in ['can', 'i', 'you', 'he', 'she', 'we', 'they'] and
                    persian_words[i] not in result):
                    result.append(persian_words[i])
        
        # For WH-questions (what, where, when, why, how)
        elif any(word in ['what', 'where', 'when', 'why', 'how'] for word in english_words):
            wh_word = None
            wh_index = -1
            
            # Find WH-word
            for i, eng_word in enumerate(english_words):
                if eng_word in ['what', 'where', 'when', 'why', 'how']:
                    wh_word = eng_word
                    wh_index = i
                    break
            
            if wh_word:
                # Add WH-word first
                result.append(persian_words[wh_index])
                
                # Add other words
                for i, eng_word in enumerate(english_words):
                    if i != wh_index and persian_words[i] not in result:
                        result.append(persian_words[i])
        
        return result if result else persian_words
    
    def ai_handle_statement(self, english_words, persian_words, analysis):
        """AI handling for statement sentences"""
        result = []
        
        # Basic SOV structure with AI improvements
        subjects = []
        verbs = []
        objects = []
        adjectives = []
        possessives = {}
        
        # Classify words with AI context
        for i, (eng_word, per_word) in enumerate(zip(english_words, persian_words)):
            # Subjects
            if eng_word in ['i', 'you', 'he', 'she', 'we', 'they']:
                subjects.append(per_word)
            
            # Verbs
            elif eng_word in ['am', 'is', 'are', 'was', 'were']:
                verbs.append('است')
            elif eng_word in ['have', 'has', 'had']:
                verbs.append('دارد')
            elif eng_word in self.translation_dict and any(x in self.translation_dict[eng_word] for x in ['می‌', 'کرد', 'است']):
                verbs.append(per_word)
            
            # Possessives
            elif eng_word in ['my', 'your', 'his', 'her', 'our', 'their']:
                if i + 1 < len(english_words):
                    possessives[i + 1] = per_word
            
            else:
                if i in possessives:
                    objects.append(persian_words[i])
                    objects.append(possessives[i])
                else:
                    objects.append(per_word)
        
        # Build sentence with AI-optimized structure
        result.extend(subjects)
        result.extend(objects)
        result.extend(verbs)
        
        return result if result else persian_words

    def initialize_comprehensive_dictionary(self):
        """Initialize with a much larger vocabulary"""
        base_dict = {
            # Pronouns
            'i': 'من', 'you': 'تو', 'he': 'او', 'she': 'او', 'we': 'ما', 'they': 'آنها', 'it': 'آن',
            'me': 'من', 'him': 'او', 'her': 'او', 'us': 'ما', 'them': 'آنها',
            'my': 'من', 'your': 'تو', 'his': 'او', 'her': 'او', 'our': 'ما', 'their': 'آنها',
            
            # Common verbs
            'am': 'هستم', 'is': 'است', 'are': 'هستید', 'was': 'بود', 'were': 'بودید',
            'have': 'دارم', 'has': 'دارد', 'had': 'داشت',
            'do': 'می‌کنم', 'does': 'می‌کند', 'did': 'کرد',
            'go': 'برویم', 'went': 'رفتیم', 'goes': 'می‌رود', 'going': 'رفتن',
            'see': 'می‌بینم', 'saw': 'دیدم', 'seen': 'دیده',
            'get': 'می‌گیرم', 'got': 'گرفتم','eat':'خوردن',
            'make': 'می‌سازم', 'made': 'ساختم',
            'take': 'می‌گیرم', 'took': 'گرفتم',
            'come': 'می‌آیم', 'came': 'آمدم',
            'know': 'می‌دانم', 'knew': 'دانستم',
            'think': 'فکر می‌کنم', 'thought': 'فکر کردم',
            'want': 'می‌خواهم', 'wanted': 'خواستم',
            'like': 'دوست دارم', 'liked': 'دوست داشتم',
            'love': 'دوست دارم', 'loved': 'دوست داشتم',
            'work': 'کار می‌کنم', 'worked': 'کار کردم',
            'play': 'بازی می‌کنم', 'played': 'بازی کردم',
            'read': 'می‌خوانم', 'reading': 'خواندن',
            'write': 'می‌نویسم', 'writing': 'نوشتن',
            'speak': 'صحبت می‌کنم', 'speaking': 'صحبت کردن',
            'understand': 'می‌فهمم', 'understanding': 'فهمیدن',
            'learn': 'یاد می‌گیرم', 'learning': 'یادگیری',
            'teach': 'آموزش می‌دهم', 'teaching': 'آموزش دادن',
            
            # Modal verbs
            'can': 'می‌توانیم', 'could': 'می‌توانستیم',
            'will': 'خواهیم', 'would': 'می‌کردیم',
            'shall': 'باید', 'should': 'باید',
            'may': 'ممکن است', 'might': 'ممکن بود',
            'must': 'باید',
            
            # Common nouns
            'time': 'زمان', 'person': 'شخص', 'people': 'مردم', 'man': 'مرد', 'woman': 'زن', 
            'child': 'کودک', 'children': 'کودکان', 'family': 'خانواده', 'friend': 'دوست',
            'house': 'خانه', 'home': 'خانه', 'room': 'اتاق', 'door': 'در', 'window': 'پنجره',
            'car': 'ماشین', 'bus': 'اتوبوس', 'train': 'قطار', 'bike': 'دوچرخه','girl':'دختر','boy':'پسر',
            'water': 'آب', 'food': 'غذا', 'bread': 'نان', 'rice': 'برنج', 'fruit': 'میوه',
            'book': 'کتاب', 'pen': 'خودکار', 'paper': 'کاغذ', 'computer': 'کامپیوتر',
            'phone': 'تلفن', 'tv': 'تلویزیون', 'music': 'موسیقی',
            'school': 'مدرسه', 'teacher': 'معلم', 'student': 'دانشجو', 'study': 'مطالعه',
            'work': 'کار', 'job': 'شغل', 'money': 'پول', 'price': 'قیمت',
            'city': 'شهر', 'country': 'کشور', 'world': 'جهان', 'street': 'خیابان',
            'day': 'روز', 'night': 'شب', 'week': 'هفته', 'month': 'ماه', 'year': 'سال',
            'sun': 'خورشید', 'moon': 'ماه', 'star': 'ستاره', 'sky': 'آسمان',
            'tree': 'درخت', 'flower': 'گل', 'animal': 'حیوان', 'dog': 'سگ', 'cat': 'گربه',
            'bird': 'پرنده', 'fish': 'ماهی', 'horse': 'اسب', 'cow': 'گاو', 'chicken': 'مرغ',
            'name': 'اسم', 'word': 'کلمه', 'number': 'عدد', 'part': 'قسمت',
            'problem': 'مشکل', 'fact': 'واقعیت', 'way': 'راه', 'thing': 'چیز',
            'life': 'زندگی', 'hand': 'دست', 'eye': 'چشم', 'head': 'سر',
            'place': 'مکان', 'point': 'نقطه', 'government': 'دولت', 'company': 'شرکت',
            'group': 'گروه', 'case': 'مورد', 'table': 'میز', 'chair': 'صندلی',
            'bed': 'تخت', 'kitchen': 'آشپزخانه', 'bathroom': 'دستشویی',
            'garden': 'باغ', 'park': 'پارک', 'shop': 'فروشگاه', 'market': 'بازار',
            'hospital': 'بیمارستان', 'doctor': 'دکتر', 'medicine': 'دارو',
            'dinner': 'شام', 'lunch': 'ناهار', 'breakfast': 'صبحانه',
            
            # Adjectives
            'good': 'خوب', 'bad': 'بد', 'big': 'بزرگ', 'small': 'کوچک', 
            'beautiful': 'زیبا', 'ugly': 'زشت', 'happy': 'خوشحال', 'sad': 'غمگین',
            'angry': 'عصبانی', 'tired': 'خسته', 'hungry': 'گرسنه', 'thirsty': 'تشنه',
            'hot': 'داغ', 'cold': 'سرد', 'warm': 'گرم', 'cool': 'خنک',
            'new': 'جدید', 'old': 'قدیمی', 'young': 'جوان', 'fast': 'سریع',
            'slow': 'آهسته', 'easy': 'آسان', 'difficult': 'سخت', 'important': 'مهم',
            
            # Prepositions
            'in': 'در', 'on': 'روی', 'at': 'در', 'to': 'به', 'from': 'از',
            'with': 'با', 'without': 'بدون', 'for': 'برای', 'about': 'درباره',
            'by': 'توسط', 'of': 'از',
            
            # Question words
            'what': 'چه', 'who': 'چه کسی', 'where': 'کجا', 'when': 'کی',
            'why': 'چرا', 'how': 'چگونه', 'which': 'کدام',
            
            # Common phrases
            'hello': 'سلام', 'hi': 'سلام', 'goodbye': 'خداحافظ', 'bye': 'خداحافظ',
            'please': 'لطفا', 'thank you': 'متشکرم', 'thanks': 'ممنون', 
            'sorry': 'متاسفم', 'excuse me': 'ببخشید',
            'yes': 'بله', 'no': 'نه', 'ok': 'باشه', 'okay': 'باشه',
        }
        
        self.translation_dict = base_dict
    
    def preprocess_text(self, text):
        """Clean and tokenize text"""
        text = text.lower()
        text = re.sub(r'[^\w\s]', ' ', text)
        words = text.split()
        return words
    
    def handle_contractions(self, word):
        """Expand common English contractions"""
        contractions = {
            "i'm": "i am", "you're": "you are", "he's": "he is", "she's": "she is",
            "it's": "it is", "we're": "we are", "they're": "they are",
            "i'll": "i will", "you'll": "you will", "he'll": "he will", "she'll": "she will",
            "we'll": "we will", "they'll": "they will", "don't": "do not",
            "doesn't": "does not", "didn't": "did not", "can't": "cannot",
            "couldn't": "could not", "won't": "will not", "wouldn't": "would not",
            "shouldn't": "should not", "isn't": "is not", "aren't": "are not",
            "wasn't": "was not", "weren't": "were not", "haven't": "have not",
            "hasn't": "has not", "hadn't": "had not", "what's": "what is"
        }
        return contractions.get(word.lower(), word)
    
    def translate_word(self, word):
        """AI-enhanced word translation"""
        # Handle contractions first
        expanded = self.handle_contractions(word)
        if expanded != word:
            return expanded
        
        clean_word = word.strip(string.punctuation).lower()
        
        # Use AI for better translation
        return self.ai_find_best_translation(clean_word)
    
    def translate_sentence(self, english_sentence):
        """AI-powered sentence translation"""
        if not english_sentence.strip():
            return ""
        
        # AI Sentence Analysis
        sentence_analysis = self.ai_sentence_analyzer(english_sentence)
        
        # Preprocess
        words = self.preprocess_text(english_sentence)
        
        # Translate each word with AI
        translated_words = []
        for word in words:
            translation = self.translate_word(word)
            if ' ' in translation:
                translated_words.extend(translation.split())
            else:
                translated_words.append(translation)
        
        # AI-powered syntax rearrangement
        final_translation = self.ai_enhanced_syntax(words, translated_words, sentence_analysis)
        
        # Join and clean
        persian_sentence = ' '.join(final_translation)
        persian_sentence = re.sub(r'\s+', ' ', persian_sentence).strip()
        
        return persian_sentence

def main():
    translator = AIPersianTranslator()
    
    print("=" * 70)
    print("🤖 AI-POWERED ENGLISH TO PERSIAN TRANSLATOR")
    print("=" * 70)
    
    # Test AI capabilities
    test_cases = [
        "can we go for dinner",
        "what is your name",
    ]
    
    print("\n🧪 AI TRANSLATION TEST:")
    print("-" * 50)
    
    for i, test in enumerate(test_cases, 1):
        translation = translator.translate_sentence(test)
        analysis = translator.ai_sentence_analyzer(test)
        
        print(f"{i:2d}. EN: {test}")
        print(f"    FA: {translation}")
        print(f"    AI Analysis: {analysis['sentence_type']} sentence")
        if analysis['modality']:
            print(f"    Modality: {analysis['modality']}")
        print()
    
    # Interactive session
    print("\n💬 AI-POWERED TRANSLATION:")
    print("-" * 50)
    
    while True:
        try:
            user_input = input("\n📝 Enter English text (or 'quit'): ").strip()
            
            if user_input.lower() in ['quit', 'exit', 'q']:
                print("👋 Goodbye! خداحافظ!")
                break
                
            if user_input:
                translation = translator.translate_sentence(user_input)
                analysis = translator.ai_sentence_analyzer(user_input)
                
                print(f"\n✅ English: {user_input}")
                print(f"✅ Persian: {translation}")
                print(f"🤖 AI Analysis: {analysis}")
                
            else:
                print("⚠️  Please enter some text!")
                
        except KeyboardInterrupt:
            print("\n\n👋 Goodbye! خداحافظ!")
            break
        except Exception as e:
            print(f"❌ Error: {e}")

if __name__ == "__main__":
    main()
